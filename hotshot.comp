component hotshot "Hotshot Board Driver";
license "GPL";

// plasmac requires floating-point
function _ fp;
// function calibrate fp;
function sensors fp;

// option extra_setup;
option extra_cleanup;

pin out bit arc_ok;          // wire to plasmac.arc-ok-in
pin out float arc_voltage;   // wire to plasmac.arc-voltage-in
pin out bit torch_breakaway; // wire to plasmac.breakaway
pin in bit torch_on;         // wire to plasmac.torch-on
pin in bit ohmic_enable;     // wire to plasmac.ohmic-enable
pin out bit ohmic_probe;     // wire to plasmac.ohmic-probe

pin in u32 axis_x_chip;
pin in u32 axis_x_motor;
pin in u32 axis_x_pitch;
pin in u32 axis_x_teeth;

pin in u32 axis_yl_chip;
pin in u32 axis_yl_motor;
pin in u32 axis_yl_pitch;
pin in u32 axis_yl_teeth;

pin in u32 axis_yr_chip;
pin in u32 axis_yr_motor;
pin in u32 axis_yr_pitch;
pin in u32 axis_yr_teeth;

pin in u32 axis_z_chip;
pin in u32 axis_z_motor;
pin in u32 axis_z_pitch;
pin in u32 axis_z_teeth;

pin in bit axis_x_enable;
pin in bit axis_yl_enable;
pin in bit axis_yr_enable;
pin in bit axis_z_enable;

pin in float axis_x_position_cmd;  // commanded position
pin out float axis_x_position_fb;  // actual position
pin in float axis_yl_position_cmd; // commanded position
pin out float axis_yl_position_fb; // actual position
pin in float axis_yr_position_cmd; // commanded position
pin out float axis_yr_position_fb; // actual position
pin in float axis_z_position_cmd;  // commanded position
pin out float axis_z_position_fb;  // actual position

// In machine units (i.e. mm or inch) per second
pin in float axis_x_max_velocity_cmd;
pin in float axis_yl_max_velocity_cmd;
pin in float axis_yr_max_velocity_cmd;
pin in float axis_z_max_velocity_cmd;

pin out float axis_x_velocity_fb;
pin out float axis_yl_velocity_fb;
pin out float axis_yr_velocity_fb;
pin out float axis_z_velocity_fb;

pin out s32 axis_x_tmc_velocity_fb;
pin out s32 axis_yl_tmc_velocity_fb;
pin out s32 axis_yr_tmc_velocity_fb;
pin out s32 axis_z_tmc_velocity_fb;

pin out s32 axis_x_tmc_position_fb;
pin out s32 axis_yl_tmc_position_fb;
pin out s32 axis_yr_tmc_position_fb;
pin out s32 axis_z_tmc_position_fb;

pin in float axis_x_max_acceleration_cmd;
pin in float axis_yl_max_acceleration_cmd;
pin in float axis_yr_max_acceleration_cmd;
pin in float axis_z_max_acceleration_cmd;

pin out u32 axis_x_tmc_max_acceleration_fb;
pin out u32 axis_yl_tmc_max_acceleration_fb;
pin out u32 axis_yr_tmc_max_acceleration_fb;
pin out u32 axis_z_tmc_max_acceleration_fb;

pin in bit axis_x_is_homing;
pin in bit axis_yl_is_homing;
pin in bit axis_yr_is_homing;
pin in bit axis_z_is_homing;

pin out bit axis_x_home_sw;
pin out bit axis_yl_home_sw;
pin out bit axis_yr_home_sw;
pin out bit axis_z_home_sw;

pin out bit axis_x_neg_limit_sw;
pin out bit axis_yl_neg_limit_sw;
pin out bit axis_yr_neg_limit_sw;
pin out bit axis_z_neg_limit_sw;

pin in u32 axis_x_tmc_sg_thresh_cmd;
pin in u32 axis_yl_tmc_sg_thresh_cmd;
pin in u32 axis_yr_tmc_sg_thresh_cmd;
pin in u32 axis_z_tmc_sg_thresh_cmd;

pin in bit axis_x_tmc_sg_stop_cmd;
pin in bit axis_yl_tmc_sg_stop_cmd;
pin in bit axis_yr_tmc_sg_stop_cmd;
pin in bit axis_z_tmc_sg_stop_cmd;

pin out bit axis_x_sg_stop_fb;
pin out bit axis_yl_sg_stop_fb;
pin out bit axis_yr_sg_stop_fb;
pin out bit axis_z_sg_stop_fb;

pin in u32 axis_x_tmc_run_current_cmd;
pin in u32 axis_yl_tmc_run_current_cmd;
pin in u32 axis_yr_tmc_run_current_cmd;
pin in u32 axis_z_tmc_run_current_cmd;

pin in u32 axis_x_tmc_hold_current_cmd;
pin in u32 axis_yl_tmc_hold_current_cmd;
pin in u32 axis_yr_tmc_hold_current_cmd;
pin in u32 axis_z_tmc_hold_current_cmd;

pin in u32 axis_x_microsteps_cmd;
pin in u32 axis_yl_microsteps_cmd;
pin in u32 axis_yr_microsteps_cmd;
pin in u32 axis_z_microsteps_cmd;

pin in u32 axis_x_tmc_cs_thresh_cmd;
pin in u32 axis_yl_tmc_cs_thresh_cmd;
pin in u32 axis_yr_tmc_cs_thresh_cmd;
pin in u32 axis_z_tmc_cs_thresh_cmd;

pin out u32 axis_x_tmc_microstep_resolution_fb;
pin out u32 axis_yl_tmc_microstep_resolution_fb;
pin out u32 axis_yr_tmc_microstep_resolution_fb;
pin out u32 axis_z_tmc_microstep_resolution_fb;

pin out s32 axis_x_tmc_motor_load_fb;
pin out s32 axis_yl_tmc_motor_load_fb;
pin out s32 axis_yr_tmc_motor_load_fb;
pin out s32 axis_z_tmc_motor_load_fb;

pin out u32 axis_x_tmc_motor_current_fb;
pin out u32 axis_yl_tmc_motor_current_fb;
pin out u32 axis_yr_tmc_motor_current_fb;
pin out u32 axis_z_tmc_motor_current_fb;

pin out bit axis_x_tmc_motor_stall_fb;
pin out bit axis_yl_tmc_motor_stall_fb;
pin out bit axis_yr_tmc_motor_stall_fb;
pin out bit axis_z_tmc_motor_stall_fb;

pin out bit axis_x_tmc_motor_standstill_fb;
pin out bit axis_yl_tmc_motor_standstill_fb;
pin out bit axis_yr_tmc_motor_standstill_fb;
pin out bit axis_z_tmc_motor_standstill_fb;

pin out bit axis_x_tmc_motor_full_stepping_fb;
pin out bit axis_yl_tmc_motor_full_stepping_fb;
pin out bit axis_yr_tmc_motor_full_stepping_fb;
pin out bit axis_z_tmc_motor_full_stepping_fb;

pin out bit axis_x_tmc_motor_overtemp_warning_fb;
pin out bit axis_yl_tmc_motor_overtemp_warning_fb;
pin out bit axis_yr_tmc_motor_overtemp_warning_fb;
pin out bit axis_z_tmc_motor_overtemp_warning_fb;

pin out bit axis_x_tmc_motor_overtemp_alarm_fb;
pin out bit axis_yl_tmc_motor_overtemp_alarm_fb;
pin out bit axis_yr_tmc_motor_overtemp_alarm_fb;
pin out bit axis_z_tmc_motor_overtemp_alarm_fb;

pin out bit axis_x_tmc_position_reached_fb;
pin out bit axis_yl_tmc_position_reached_fb;
pin out bit axis_yr_tmc_position_reached_fb;
pin out bit axis_z_tmc_position_reached_fb;

pin out bit axis_x_tmc_t_zerowait_active_fb;
pin out bit axis_yl_tmc_t_zerowait_active_fb;
pin out bit axis_yr_tmc_t_zerowait_active_fb;
pin out bit axis_z_tmc_t_zerowait_active_fb;

pin out bit axis_x_tmc_velocity_reached_fb;
pin out bit axis_yl_tmc_velocity_reached_fb;
pin out bit axis_yr_tmc_velocity_reached_fb;
pin out bit axis_z_tmc_velocity_reached_fb;

pin out float axis_x_tmc_max_velocity_fb;
pin out float axis_yl_tmc_max_velocity_fb;
pin out float axis_yr_tmc_max_velocity_fb;
pin out float axis_z_tmc_max_velocity_fb;

pin out bit estop-fb;
pin in bit estop-cmd;
pin out bit abort-fb;

;;

#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <string.h>
#include <time.h>
#include <unistd.h>
#include <sys/types.h>
#include <rtapi.h>
#include "bcm2835.h"
#include "rpi.h"
#include "tmc5041.h"
#include "hotshot.h"

// ============================================================================
// Main application

float thc_voltage(uint8_t chip, float V_ref)
{
    //
    // Read from ADC
    // Protocol start bit (S), sgl/diff (D), odd/sign (C), MSBF (M)
    //  S = 1
    //  D = 1 ; 0=diff, 1= Single ended (i.e. 2 channel) mode
    //  C = 0; if D=0, then odd/sign, if D=1, then 0 or 1 for channel number
    //  M = 1
    // Message = { 0000000S, DCM00000, 00000000 }
    // Final byte of zeros is so we get an 3 total bytes back from ADC
    char send_data[3] = {0b00000001, 0b10000000, 0b00000000};
    bcm2835_aux_spi_transfern(send_data, 3);
    // Intrepret ADC response
    // Get sensor value
    uint16_t value = 0x00;
    // We need only data from last 2 bytes.
    // And there we can discard last two bits to get 10 bit value
    // as MCP3002 resolution is 10bits
    //
    // 15 = 0000 1111 with & operation makes sure that we have all data from XXXX DDDD and nothing more.
    value = send_data[1] & 15;
    // Move to left to make room for next piece of data.
    value = value << 6; // 000D DDDD << 6 == 0DDD DD00 0000
    // Now we get the last of data from byte 3, discarding last two bits
    value = value + (send_data[2] >> 2);
    // DDDD DDXXX >> 2 == 00DD DDDD
    // 0DDD DD00 0000 + 00DD DDDD == 0DDD DDDD DDDD
    // Convert to voltage
    // Voltage = ( V_ref * value ) / 1024
    float voltage = (V_ref * value) / 1024;

    // Assumes 50:1 voltage divider
    return voltage * 50;
}

bool was_all_homed = 0;

bool get_home_switch_state(joint_t * motor, bool axis_is_homing) {
    if (axis_is_homing) {
        ramp_stat_register_t reg = tmc5041_get_register_RAMP_STAT(motor);
        return reg.status_sg;
    }
    return FALSE;
}

bool get_neg_limit_switch_state(joint_t * motor, float axis_max_velocity_cmd) {
    if (axis_max_velocity_cmd < 0) {
        ramp_stat_register_t reg = tmc5041_get_register_RAMP_STAT(motor);
        return reg.status_sg;
    }
    return FALSE;
}

// Main application
// ============================================================================

// ============================================================================
// LinuxCNC HAL Module

// 0 = X, 1 = YL, 2 = YR, 3 = Z
#define MOTOR_COUNT 4
joint_t motors[MOTOR_COUNT];

bool needs_setup = TRUE;

// For TMC-API support
TMC5041TypeDef tmc5041_motors[TMC5041_MOTORS];


/**
 * Set up all hardware. 
 * Should only ever be called once.
 */
bool setup_once() {

    // Intialize Broadcom driver
    bcm2835_init();

    // Set up RPi GPIO
    rpi_setup_gpio();

    // Set up RPi SPI
    rpi_setup_spi0();
    rpi_setup_spi1();

    // Initialize TMC5041s
    config_tmc5041(motors, MOTOR_COUNT);

    return FALSE;
}

// main function
FUNCTION(_)
{

    // TODO Do checks before coming out of estop?
    // estop_fb must equal estop_cmd in order to come out of estop on EMC startup.
    estop_fb = estop_cmd;

    // Set up motors exactly once.
    if (needs_setup) {

        // X
        #undef axis_x_enable
        #undef axis_x_is_homing
        #undef axis_x_position_cmd
        #undef axis_x_tmc_sg_stop_cmd
        #undef axis_x_tmc_sg_thresh_cmd
        #undef axis_x_max_velocity_cmd
        uint32_t axis_x_microstep_per_mm = microsteps_per_mm(200, axis_x_pitch * axis_x_teeth, axis_x_microsteps_cmd);
        motors[0] = (joint_t) {
            .chip                   = axis_x_chip,
            .motor                  = axis_x_motor,
            .pitch                  = axis_x_pitch,
            .teeth                  = axis_x_teeth,
            .is_enabled             = __comp_inst->axis_x_enable,
            .is_homing              = __comp_inst->axis_x_is_homing,
            .position_cmd           = __comp_inst->axis_x_position_cmd,
            .position_fb            = &axis_x_position_fb,
            .max_velocity_cmd       = __comp_inst->axis_x_max_velocity_cmd,
            .velocity_fb            = &axis_x_velocity_fb,
            .max_acceleration_cmd   = axis_x_max_acceleration_cmd,
            .microsteps_cmd         = axis_x_microsteps_cmd,
            .mm_per_rev             = axis_x_pitch * axis_x_teeth,
            .microstep_per_mm       = axis_x_microstep_per_mm,
            .tmc_run_current_cmd    = axis_x_tmc_run_current_cmd,
            .tmc_hold_current_cmd   = axis_x_tmc_hold_current_cmd,
            .tmc_sg_stop_cmd        = __comp_inst->axis_x_tmc_sg_stop_cmd,
            .tmc_sg_thresh_cmd      = __comp_inst->axis_x_tmc_sg_thresh_cmd,
            .tmc_mres_cmd                       = microsteps_to_tmc_mres(axis_x_microsteps_cmd),
            .tmc_cs_thresh_cmd                  = axis_x_tmc_cs_thresh_cmd,
            .tmc_max_velocity_fb                = &axis_x_tmc_max_velocity_fb,
            .tmc_max_acceleration_fb            = &axis_x_tmc_max_acceleration_fb,
            .sg_stop_fb                         = &axis_x_sg_stop_fb,
            .home_sw_fb                         = &axis_x_home_sw,
            .tmc_position_fb                    = &axis_x_tmc_position_fb,
            .tmc_velocity_fb                    = &axis_x_tmc_velocity_fb,
            .tmc_motor_standstill_fb            = &axis_x_tmc_motor_standstill_fb,
            .tmc_motor_full_stepping_fb         = &axis_x_tmc_motor_full_stepping_fb,
            .tmc_motor_overtemp_warning_fb      = &axis_x_tmc_motor_overtemp_warning_fb,
            .tmc_motor_overtemp_alarm_fb        = &axis_x_tmc_motor_overtemp_alarm_fb,
            .tmc_motor_load_fb                  = &axis_x_tmc_motor_load_fb,
            .tmc_motor_current_fb               = &axis_x_tmc_motor_current_fb,
            .tmc_motor_stall_fb                 = &axis_x_tmc_motor_stall_fb,
            .tmc_microstep_resolution_fb        = &axis_x_tmc_microstep_resolution_fb,
            // TODO move to sensors() function
            .torch_breakaway_fb     = &torch_breakaway,
        };
        // *motors[0].tmc_max_velocity_fb = (float)fabs(axis_x_max_velocity_cmd) * axis_x_microstep_per_mm;
        // *motors[0].tmc_max_acceleration_fb = mm_to_microsteps(axis_x_microstep_per_mm, axis_x_max_acceleration_cmd);
    
        // YL
        #undef axis_yl_enable
        #undef axis_yl_is_homing
        #undef axis_yl_position_cmd
        #undef axis_yl_tmc_sg_stop_cmd
        #undef axis_yl_tmc_sg_thresh_cmd
        #undef axis_yl_max_velocity_cmd
        uint32_t axis_yl_microstep_per_mm = microsteps_per_mm(200, axis_yl_pitch * axis_yl_teeth, axis_yl_microsteps_cmd);
        motors[1] = (joint_t) {
            .chip                   = axis_yl_chip,
            .motor                  = axis_yl_motor,
            .pitch                  = axis_yl_pitch,
            .teeth                  = axis_yl_teeth,
            .is_enabled             = __comp_inst->axis_yl_enable,
            .is_homing              = __comp_inst->axis_yl_is_homing,
            .position_cmd           = __comp_inst->axis_yl_position_cmd,
            .position_fb            = &axis_yl_position_fb,
            .max_velocity_cmd       = __comp_inst->axis_yl_max_velocity_cmd,
            .velocity_fb            = &axis_yl_velocity_fb,
            .max_acceleration_cmd   = axis_yl_max_acceleration_cmd,
            .microsteps_cmd         = axis_yl_microsteps_cmd,
            .mm_per_rev             = axis_yl_pitch * axis_yl_teeth,
            .microstep_per_mm       = axis_yl_microstep_per_mm,
            .tmc_run_current_cmd    = axis_yl_tmc_run_current_cmd,
            .tmc_hold_current_cmd   = axis_yl_tmc_hold_current_cmd,
            .tmc_sg_stop_cmd        = __comp_inst->axis_yl_tmc_sg_stop_cmd,
            .tmc_sg_thresh_cmd      = __comp_inst->axis_yl_tmc_sg_thresh_cmd,
            .tmc_mres_cmd               = microsteps_to_tmc_mres(axis_yl_microsteps_cmd),
            .tmc_cs_thresh_cmd                      = axis_yl_tmc_cs_thresh_cmd,
            .tmc_max_velocity_fb                = &axis_yl_tmc_max_velocity_fb,
            .tmc_max_acceleration_fb            = &axis_yl_tmc_max_acceleration_fb,
            .sg_stop_fb                         = &axis_yl_sg_stop_fb,
            .home_sw_fb                         = &axis_yl_home_sw,
            .tmc_position_fb                    = &axis_yl_tmc_position_fb,
            .tmc_velocity_fb                    = &axis_yl_tmc_velocity_fb,
            .tmc_motor_standstill_fb            = &axis_yl_tmc_motor_standstill_fb,
            .tmc_motor_full_stepping_fb         = &axis_yl_tmc_motor_full_stepping_fb,
            .tmc_motor_overtemp_warning_fb      = &axis_yl_tmc_motor_overtemp_warning_fb,
            .tmc_motor_overtemp_alarm_fb        = &axis_yl_tmc_motor_overtemp_alarm_fb,
            .tmc_motor_load_fb                  = &axis_yl_tmc_motor_load_fb,
            .tmc_motor_current_fb               = &axis_yl_tmc_motor_current_fb,
            .tmc_motor_stall_fb                 = &axis_yl_tmc_motor_stall_fb,
            .tmc_microstep_resolution_fb        = &axis_yl_tmc_microstep_resolution_fb,
            // TODO move to sensors() function
            .torch_breakaway_fb     = &torch_breakaway,
        };
        // *motors[1].tmc_max_velocity_fb = (float)fabs(axis_yl_max_velocity_cmd) * axis_yl_microstep_per_mm;
        // *motors[1].tmc_max_acceleration_fb = mm_to_microsteps(axis_yl_microstep_per_mm, axis_yl_max_acceleration_cmd);

        // YR
        #undef axis_yr_enable
        #undef axis_yr_is_homing
        #undef axis_yr_position_cmd
        #undef axis_yr_tmc_sg_stop_cmd
        #undef axis_yr_tmc_sg_thresh_cmd
        #undef axis_yr_max_velocity_cmd
        uint32_t axis_yr_microstep_per_mm = microsteps_per_mm(200, axis_yr_pitch * axis_yr_teeth, axis_yr_microsteps_cmd);
        motors[2] = (joint_t) {
            .chip                   = axis_yr_chip,
            .motor                  = axis_yr_motor,
            .pitch                  = axis_yr_pitch,
            .teeth                  = axis_yr_teeth,
            .is_enabled             = __comp_inst->axis_yr_enable,
            .is_homing              = __comp_inst->axis_yr_is_homing,
            .position_cmd           = __comp_inst->axis_yr_position_cmd,
            .position_fb            = &axis_yr_position_fb,
            .max_velocity_cmd       = __comp_inst->axis_yr_max_velocity_cmd,
            .velocity_fb            = &axis_yr_velocity_fb,
            .max_acceleration_cmd   = axis_yr_max_acceleration_cmd,
            .microsteps_cmd         = axis_yr_microsteps_cmd,
            .mm_per_rev             = axis_yr_pitch * axis_yr_teeth,
            .microstep_per_mm       = axis_yr_microstep_per_mm,
            .tmc_run_current_cmd    = axis_yr_tmc_run_current_cmd,
            .tmc_hold_current_cmd   = axis_yr_tmc_hold_current_cmd,
            .tmc_sg_stop_cmd        = __comp_inst->axis_yr_tmc_sg_stop_cmd,
            .tmc_sg_thresh_cmd      = __comp_inst->axis_yr_tmc_sg_thresh_cmd,
            .tmc_mres_cmd                           = microsteps_to_tmc_mres(axis_yr_microsteps_cmd),
            .tmc_cs_thresh_cmd                      = axis_yr_tmc_cs_thresh_cmd,
            .tmc_max_velocity_fb                = &axis_yr_tmc_max_velocity_fb,
            .tmc_max_acceleration_fb            = &axis_yr_tmc_max_acceleration_fb,
            .sg_stop_fb                         = &axis_yr_sg_stop_fb,
            .home_sw_fb                         = &axis_yr_home_sw,
            .tmc_position_fb                    = &axis_yr_tmc_position_fb,
            .tmc_velocity_fb                    = &axis_yr_tmc_velocity_fb,
            .tmc_motor_standstill_fb            = &axis_yr_tmc_motor_standstill_fb,
            .tmc_motor_full_stepping_fb         = &axis_yr_tmc_motor_full_stepping_fb,
            .tmc_motor_overtemp_warning_fb      = &axis_yr_tmc_motor_overtemp_warning_fb,
            .tmc_motor_overtemp_alarm_fb        = &axis_yr_tmc_motor_overtemp_alarm_fb,
            .tmc_motor_load_fb                  = &axis_yr_tmc_motor_load_fb,
            .tmc_motor_current_fb               = &axis_yr_tmc_motor_current_fb,
            .tmc_motor_stall_fb                 = &axis_yr_tmc_motor_stall_fb,
            .tmc_microstep_resolution_fb        = &axis_yr_tmc_microstep_resolution_fb,
            // TODO move to sensors() function
            .torch_breakaway_fb     = &torch_breakaway,
        };
        // *motors[2].tmc_max_velocity_fb = (float)fabs(axis_yr_max_velocity_cmd) * axis_yr_microstep_per_mm;
        // *motors[2].tmc_max_acceleration_fb = mm_to_microsteps(axis_yr_microstep_per_mm, axis_yr_max_acceleration_cmd);

        // Z
        #undef axis_z_enable
        #undef axis_z_is_homing
        #undef axis_z_position_cmd
        #undef axis_z_tmc_sg_stop_cmd
        #undef axis_z_tmc_sg_thresh_cmd
        #undef axis_z_max_velocity_cmd
        uint32_t axis_z_microstep_per_mm = microsteps_per_mm(200, axis_z_pitch * axis_z_teeth, axis_z_microsteps_cmd);
        motors[3] = (joint_t) {
            .chip                   = axis_z_chip,
            .motor                  = axis_z_motor,
            .pitch                  = axis_z_pitch,
            .teeth                  = axis_z_teeth,
            .is_enabled             = __comp_inst->axis_z_enable,
            .is_homing              = __comp_inst->axis_z_is_homing,
            .position_cmd           = __comp_inst->axis_z_position_cmd,
            .position_fb            = &axis_z_position_fb,
            .max_velocity_cmd       = __comp_inst->axis_z_max_velocity_cmd,
            .velocity_fb            = &axis_z_velocity_fb,
            .max_acceleration_cmd   = axis_z_max_acceleration_cmd,
            .microsteps_cmd         = axis_z_microsteps_cmd,
            .mm_per_rev             = axis_z_pitch * axis_z_teeth,
            .microstep_per_mm       = axis_z_microstep_per_mm,
            .tmc_run_current_cmd    = axis_z_tmc_run_current_cmd,
            .tmc_hold_current_cmd   = axis_z_tmc_hold_current_cmd,
            .tmc_sg_stop_cmd        = __comp_inst->axis_z_tmc_sg_stop_cmd,
            .tmc_sg_thresh_cmd      = __comp_inst->axis_z_tmc_sg_thresh_cmd,
            .tmc_mres_cmd               = microsteps_to_tmc_mres(axis_z_microsteps_cmd),
            .tmc_cs_thresh_cmd                      = axis_z_tmc_cs_thresh_cmd,
            .tmc_max_velocity_fb                = &axis_z_tmc_max_velocity_fb,
            .tmc_max_acceleration_fb            = &axis_z_tmc_max_acceleration_fb,
            .sg_stop_fb                         = &axis_z_sg_stop_fb,
            .home_sw_fb                         = &axis_z_home_sw,
            .tmc_position_fb                    = &axis_z_tmc_position_fb,
            .tmc_velocity_fb                    = &axis_z_tmc_velocity_fb,
            .tmc_motor_standstill_fb            = &axis_z_tmc_motor_standstill_fb,
            .tmc_motor_full_stepping_fb         = &axis_z_tmc_motor_full_stepping_fb,
            .tmc_motor_overtemp_warning_fb      = &axis_z_tmc_motor_overtemp_warning_fb,
            .tmc_motor_overtemp_alarm_fb        = &axis_z_tmc_motor_overtemp_alarm_fb,
            .tmc_motor_load_fb                  = &axis_z_tmc_motor_load_fb,
            .tmc_motor_current_fb               = &axis_z_tmc_motor_current_fb,
            .tmc_motor_stall_fb                 = &axis_z_tmc_motor_stall_fb,
            .tmc_microstep_resolution_fb        = &axis_z_tmc_microstep_resolution_fb,
            // TODO move to sensors() function
            .torch_breakaway_fb     = &torch_breakaway,
        };
        // *motors[3].tmc_max_velocity_fb = (float)fabs(axis_z_max_velocity_cmd) * microsteps_per_mm(200, axis_z_pitch * axis_z_teeth, axis_z_microsteps_cmd);
        // *motors[3].tmc_max_acceleration_fb = mm_to_microsteps(axis_z_microstep_per_mm, axis_z_max_acceleration_cmd);

        needs_setup = setup_once();
    }

    update_tmc5041(motors, MOTOR_COUNT);

    handle_joint(&motors[0]);
    handle_joint(&motors[1]);
    handle_joint(&motors[2]);
    handle_joint(&motors[3]);

}

FUNCTION(sensors) {

    rpi_start_spi_conversation(BCM2835_SPI_CS1);

    // TODO go into estop mode on estop-cmd?

    // TODO maybe set abort-fb
    abort_fb = FALSE;

    // Read in arc voltage and set arc_voltage pin
    float V_ref = 5;
    arc_voltage = thc_voltage(BCM2835_SPI_CS1, V_ref);
    // TODO implmement moving average? https://forums.raspberrypi.com/viewtopic.php?t=40248
    //      (new result) = (previous result)*(1 - ratio) + (new sample) * (ratio)
    //      using a ratio of 0.025
    rpi_end_spi_conversation();

    // Read in arc ok switch state and set arc_ok bin bit
    //  plasmac.arc-ok-in bit in
    //    external arc ok input signal [mode 1 & mode 2]
    uint8_t arc_ok_level = bcm2835_gpio_lev(PIN_ARC_OK);
    if (arc_ok_level == HIGH)
    {
        arc_ok = TRUE;
    }
    else
    {
        arc_ok = FALSE;
    }

    // Removed in favor of Stallguard based breakaway
    //
    // Read in breakaway switch state and set breakaway pin bit
    //  plasmac.breakaway bit in
    //      torch breakaway switch (optional, see float_switch)
    // uint8_t torch_breakaway_level = bcm2835_gpio_lev(PIN_TORCH_BREAKAWAY);
    // if (torch_breakaway_level == LOW)
    // {
    //     torch_breakaway = TRUE;
    // }
    // else
    // {
    //     torch_breakaway = FALSE;
    // }

    // Read in ohmic probe contact state and set ohmic_probe pin bit
    //  plasmac.ohmic-probe bit in
    //      ohmic probe input
    uint8_t ohmic_probe_level = bcm2835_gpio_lev(PIN_OHMIC_PROBE);
    if (ohmic_probe_level == HIGH)
    {
        ohmic_probe = TRUE;
    }
    else
    {
        ohmic_probe = FALSE;
    }

    // TODO bring this back when we have a physical estop
    //
    // Read in ohmic probe contact state and set ohmic_probe pin bit
    // estop is wired fail safe, i.e. active low.
    // However, PlasmaC expects FALSE to indicate active estop
    // uint8_t estop_fb_level = bcm2835_gpio_lev(PIN_ESTOP);
    // if (estop_fb_level == HIGH)
    // {
    //     estop_fb = TRUE;
    // }
    // else
    // {
    //     estop_fb = FALSE;
    // }

    // Read in ohmic_enable pin and enable/disable ohmic sensor relay
    //  plasmac.ohmic-enable bit out
    //      on only while probing
    if (ohmic_enable)
    {
        bcm2835_gpio_set(PIN_OHMIC_ENABLE);
    }
    else
    {
        bcm2835_gpio_clr(PIN_OHMIC_ENABLE);
    }

    // Read in torch_on pin bit and enable/disable torch fire relay
    //  plasmac.torch-on bit out
    //      turn torch on, connect to your torch on input
    if (torch_on)
    {
        bcm2835_gpio_set(PIN_TORCH_ON);
    }
    else
    {
        bcm2835_gpio_clr(PIN_TORCH_ON);
    }
}

EXTRA_CLEANUP()
{
    teardown_tmc5041(motors, MOTOR_COUNT);
   
    rpi_teardown_spi0();
    rpi_teardown_spi1();

    // Close the library, deallocating any allocated memory and closing /dev/mem
    bcm2835_close();
}

// HAL Module
// ============================================================================
